<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>100</x>
      <y>540</y>
      <w>310</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- data : Type


--
+Node&lt;Type&gt;():constructor
+Node&lt;Type&gt;(Type) : constructor

+getData() : Type
+setDate(Type) : void
bg=pink
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>170</x>
      <y>870</y>
      <w>490</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>LinearNode&lt;Type&gt;

--

- next : Node&lt;Type&gt; *

--
+LinearNode&lt;Type&gt;(Type): constructor
+LinearNode&lt;Type&gt;(Type,LinearNode&lt;Type&gt;) : constructor
+LinearNode&lt;Typ&gt;(Type,LinearNode&lt;Type&gt;) : constructor

+getNext() : Node&lt;Type&gt; *
+ setNext(Node&lt;Type&gt; *) : void
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>710</x>
      <y>860</y>
      <w>310</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
-size : int
-front : LinearNode&lt;Type&gt;*
-internalArray: Type*
--
+Array&lt;Type&gt;(int) : constructor
+Array&lt;Type&gt;(Array&lt;Types&gt;):constructor
+getSize() : int
+setAtIndex(int, Type): void
+getFromIndex(int) : Type
+operator []
+operator = Array&lt;Type&gt; &amp; 
+ ~Array() : destructor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>650</x>
      <y>910</y>
      <w>80</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>190</x>
      <y>1150</y>
      <w>330</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>/List&lt;Type&gt;/
--
# size : int
--
*ListStructure Methods*
/getFromIndex(int) : Type /
/add(Type) : void/
/addAtIndex(int, Type) : void/
/remove(int) : Type/

*List Accessors*
/getSize() : int/
/getFront() : LinearNode&lt;Type&gt;*/
/getEnd() : LinearNode&lt;Type&gt;*/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>110</x>
      <y>1500</y>
      <w>300</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>LinkedList&lt;Type&gt;
--
-front : LinearNode&lt;Type&gt; * 
- end : LinearNode&lt;Type&gt; *
--
+ LinkedList() : constructor
+ ~LinkedList() : destructor

*Stack Methods*
+push(Type) : void
+pop() : Type
+peek() : Type

*List Structure Methods*
+getFromIndex(int) : Type
+add(Type) : void
+addAtIndex(int, Type) : void
+remove(int) : Type
+contains(Type) : bool

*List Accessors*
+ getSize(): int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>820</x>
      <y>1490</y>
      <w>320</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>Stack&lt;type&gt;
--

--
+ Stack() : constructor
+ ~Stack() : destructor

*Stack Methods*
+push(Type) : void
+pop() : Type
+peek() : Type

*List Structure Methods*
+getFromIndex(int) : Type
+add(Type) : void
+addAtIndex(int, Type) : void
+remove(int) : Type
+contains(Type) : bool

*List Accessors*
+ getSize(): int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>450</x>
      <y>1490</y>
      <w>310</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>Queue&lt;Type&gt;
--
--
+ Queue() : constructor
+ ~Queue() : destructor

*Queue Methods*
+push(Type) : void
+pop() : Type
+peek() : Type

*List Structure Methods*
+getFromIndex(int) : Type
+add(Type) : void
+addAtIndex(int, Type) : void
+remove(int) : Type
+contains(Type) : bool

*List Accessors*
+ getSize(): int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>330</x>
      <y>1380</y>
      <w>510</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;490.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>330</x>
      <y>1380</y>
      <w>250</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;230.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>250</x>
      <y>1380</y>
      <w>110</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>450</x>
      <y>1070</y>
      <w>130</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..n</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>220</x>
      <y>710</y>
      <w>130</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>590</x>
      <y>1210</y>
      <w>230</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>CrimeData
--
-Too Many
--
+CrimeData() : constructor
+CrimeData(string): constructor
+getXXX() : various
+ == : bool
+ &lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>900</x>
      <y>1210</y>
      <w>190</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>Music
--
-Too Many
--
+Music() : constructor
+Music(string): constructor
+getXXX() : various
+ == : bool
+ &lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1250</x>
      <y>1240</y>
      <w>130</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>LinearTester

--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1490</x>
      <y>1230</y>
      <w>170</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>TreeTester

--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1220</x>
      <y>1390</y>
      <w>180</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>GraphTester 

--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1230</x>
      <y>1600</y>
      <w>150</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>AlgorithmTester

--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1510</x>
      <y>1390</y>
      <w>170</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>HashtableTester

--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>660</x>
      <y>1240</y>
      <w>610</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>590.0;10.0;440.0;160.0;150.0;160.0;10.0;250.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>320</x>
      <y>1390</y>
      <w>610</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=-

Aggregation </panel_attributes>
    <additional_attributes>10.0;110.0;310.0;10.0;590.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>580</x>
      <y>650</y>
      <w>240</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>DoubleNode&lt;Type&gt;
--
-nextNode : DN*
-prevNode : DN*

--
+ DN()
+ DN(Type)
+ DN(Type, BDN*, BDN*)
+ get/set</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>400</x>
      <y>600</y>
      <w>200</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;180.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1050</x>
      <y>530</y>
      <w>600</w>
      <h>620</h>
    </coordinates>
    <panel_attributes>NonLinear :: Graph
--
-MAXIMUM : int 
-adjacencyMatrix : bool[][]
-weightCostMatrix : int[][]
-graphData : Type[]
-vertexCount : int

--

Graph() : constructor

+ addVertex(const Type&amp; value) : void

*Connect Vertices*
+addEdge(int source, int target);
+addEdgeUndirected(int source, int target): void
+addEdgeCost(int source, int target, int cost) : void

*Disconnect Vertices*
+addEdge(int source, int target);
+addEdgeUndirected(int source, int target): void
+addEdgeCost(int source, int target, int cost) : void

*Accessors*
+ operator [] (int vertex) : Type &amp;
+ operator [] (int vertex) : Type const
+ size() const : int

*Check Connections*
+ hasUndirectedConnection(int source, int target) : const bool
+ areConnected(int source, int target) : const bool
+ neighbors(int vertex) : const std:set&lt;int&gt;

*Traversals*
+ depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ breadthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ costTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
- depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex, bool markedVertices[]) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>100</x>
      <y>50</y>
      <w>410</w>
      <h>350</h>
    </coordinates>
    <panel_attributes>BinaryTreeNode&lt;Type&gt;
--
- left: BinaryTreeNode&lt;Type&gt;*
-right: BinaryTreeNode&lt;Type&gt;*
-root: BinaryTreeNode&lt;Type&gt;*

--
+BinaryTreeNode&lt;Type&gt;(): constructor
+BinaryTreeNode&lt;Type&gt;(Type): constructor

+getRoot(): BinaryTreeNode&lt;Type&gt;*
+getLeftChild(): BinaryTreeNode&lt;Type&gt;*
+getRightChild(): BinaryTreeNode&lt;Type&gt;*

+setRoot(BinaryTreeNode&lt;Type&gt; *) : void
+setLeftChild(BinaryTreeNode&lt;Type&gt;*) : void
+setRightChild(BinaryTreeNode&lt;Type&gt;*) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>230</x>
      <y>390</y>
      <w>30</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;150.0;10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>610</x>
      <y>120</y>
      <w>280</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>Tree &lt;Type&gt;
-
+root: BinaryTreeNode&lt;Type&gt;

-

+ getSize(): int
+getHeight(): int
+isComplete(): bool</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
